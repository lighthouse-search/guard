stages:
  - build_rust_binary
  - build

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:latest
  GIT_STRATEGY: clone

build_rust_binary:
  image: rust:latest
  stage: build_rust_binary
  services:
    - docker:dind
  script:
    - rustc --version && cargo --version  # For any future debugging.
    - apt update -y && apt install zip tree -y
    - tree /
    - cd /builds/oracularhades/guard/server
    - cargo build --verbose --release
    - cargo test --verbose
    - mkdir /builds/oracularhades/release
    - apt-get update -y &&
      apt-get install -y build-essential curl file git &&
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" &&
      echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' >> ~/.profile &&
      eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv) &&
      brew install node &&
      cd frontend && npm install && npm run build && cd ..
    - mv /builds/oracularhades/guard/server/target/release/guard-server /builds/oracularhades/release
    - mkdir /builds/oracularhades/release/frontend/
    - mv /builds/oracularhades/guard/server/frontend/_static /builds/oracularhades/release/frontend/_static
    - tree /builds
    - cd /builds/oracularhades/release
    - zip -r /builds/oracularhades/guard/guard.zip .
  artifacts:
    paths:
      - /builds/oracularhades/guard/guard.zip

build:
  image: docker:cli
  stage: build
  services:
    - docker:dind
  needs:
    - job: build_rust_binary
      artifacts: true
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - unzip -o /builds/oracularhades/guard/guard.zip -d /builds/oracularhades/release
    - docker buildx create --use
    - docker buildx inspect --bootstrap
    - docker buildx build --file ./server/Dockerfile --push --tag $DOCKER_IMAGE_NAME ./server