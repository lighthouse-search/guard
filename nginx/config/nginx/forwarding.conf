worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    lua_shared_dict destinations 10m;

    server {
        listen 80;

        location / {
            # Forward request to the intermediary server
            proxy_pass http://intermediary_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Execute the Lua script to handle the intermediary server response
            access_by_lua_file /etc/nginx/lua/handle_response.lua;

            proxy_intercept_errors on;
            error_page 502 = @modified_request;
        }

        location @modified_request {
            internal;

            set $upstream_url $http_destination_url;

            # Forward the modified request to the destination URL from the intermediary response
            proxy_pass $upstream_url;

            # Set the x-guard header captured from the intermediary response
            header_filter_by_lua_block {
                if ngx.ctx.guard then
                    ngx.req.set_header("x-guard", ngx.ctx.guard)
                end
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
