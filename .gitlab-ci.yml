stages:
  - version_bump
  - build_rust_binary
  - build

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:latest

version_bump:
  stage: version_bump
  image: rust:latest
  before_script:
    - git config --global user.email "gitlab-ci@users.noreply.gitlab.com"
    - git config --global user.name "GitLab CI"
  script:
    # Extract the current version
    - VERSION=$(grep -m1 '^version =' Cargo.toml | sed -E 's/version = "([0-9]+)\.([0-9]+)\.([0-9]+)"/\1.\2.\3/')
    # Split the version into major, minor, patch
    - IFS='.' read -r major minor patch <<< "$VERSION"
    # Increment the patch version
    - new_patch=$((patch + 1))
    # Replace the version in Cargo.toml
    - sed -i "s/version = \"$VERSION\"/version = \"$major.$minor.$new_patch\"/" Cargo.toml
    # Verify the change
    - echo "Updated version in Cargo.toml to $major.$minor.$new_patch"
    # Commit the version bump
    - git add Cargo.toml
    - git commit -m "Bump version to $major.$minor.$new_patch"
    # Push the changes
    - git push origin main

build_rust_binary:
  image: rust:latest
  stage: build
  services:
    - docker:dind
  script:
    - rustc --version && cargo --version  # For any future debugging.
    - apt update -y && apt install zip tree -y
    - cargo build --verbose --release
    - cargo test --verbose
    - tree /
    - mkdir /builds/oracularhades/release
    - apt-get update -y &&
      apt-get install -y build-essential curl file git &&
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" &&
      echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' >> ~/.profile &&
      eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv) &&
      brew install node &&
      cd frontend && npm install && npm run build && cd ..
    - mv /builds/oracularhades/guard/target/release/guard-server /builds/oracularhades/release
    - mkdir /builds/oracularhades/release/frontend/
    - mv /builds/oracularhades/guard/frontend/_static /builds/oracularhades/release/frontend/_static
    - tree /builds
    - cd /builds/oracularhades/release
    - zip -r /builds/oracularhades/guard/guard.zip .
  artifacts:
    paths:
      - /builds/oracularhades/guard/guard.zip

build:
  image: docker:cli
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker buildx create --use
    - docker buildx inspect --bootstrap
    - docker buildx build --file ./Dockerfile --push --tag $DOCKER_IMAGE_NAME ./