name: Rust

on:
  push:
    branches: [ "cicd-changed" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: rust:latest

    steps:
    - uses: actions/checkout@v4

    - name: Check if version already exists
      run: |
        apt update
        apt install -y jq
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        EXISTING_TAGS=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[].tag_name')
        if echo "$EXISTING_TAGS" | grep -q "^$VERSION$"; then
          echo "Error: Version $VERSION already exists as a release tag"
          exit 1
        fi
        echo "Version $VERSION is new, proceeding with release"
      
    - name: make build
      run: BASE=. make build

    - name: tree .
      run: tree .
      
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "${{ env.VERSION }}"
        prerelease: true
        title: Release ${{ env.VERSION }}
        files: |
          ./guard.zip

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ env.VERSION }}