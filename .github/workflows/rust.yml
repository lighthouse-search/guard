name: Rust

on:
  push:
    branches: [ "cicd-changed" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: rust:latest

    steps:
    - uses: actions/checkout@v4

    - name: Check if version already exists
      run: |
        apt update
        apt install -y jq

        VERSION=$(jq -r '.version' release.json)
          if [ "${{ github.ref_name }}" != "main" ]; then
            VERSION="${{ github.ref_name }}-$VERSION"
          fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV

        # Get releases and check if the response is valid JSON
        RELEASES_RESPONSE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases")
        echo "API Response: $RELEASES_RESPONSE"
        
        # Check if response is valid JSON array
        if echo "$RELEASES_RESPONSE" | jq -e '. | type == "array"' > /dev/null 2>&1; then
          EXISTING_TAGS=$(echo "$RELEASES_RESPONSE" | jq -r '.[].tag_name')
          if echo "$EXISTING_TAGS" | grep -q "^$VERSION$"; then
            echo "Error: Version $VERSION already exists as a release tag"
            exit 1
          fi
          echo "Version $VERSION is new, proceeding with release"
        else
          echo "Warning: Could not fetch releases or invalid response format. Proceeding with release."
          echo "Response was: $RELEASES_RESPONSE"
        fi
      
    - name: make build
      run: BASE=. make build

    - name: tree .
      run: tree .
      
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "${{ env.VERSION }}"
        prerelease: ${{ github.ref_name != 'main' }}
        title: Release ${{ env.VERSION }}
        files: |
          ./guard.zip

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get release.json
      run: |
        sudo apt update
        sudo apt install -y jq

        VERSION=$(jq -r '.version' release.json)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./server/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ env.VERSION }}